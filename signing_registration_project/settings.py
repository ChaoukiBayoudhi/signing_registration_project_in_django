"""
Django settings for signing_registration_project project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jbz&)mhfd7qd&2i+nr+hq@^rj+i7wck1+yso)wyeuz2tzi4nl1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'signing_registration_app',
    #'sslserver',
]
#this option is used to tell django to use our custom user model
#instead of the built-in user model (overriding the built-in user model defined by django)
AUTH_USER_MODEL='signing_registration_app.CustomUser'
LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'home'

# #this option is used to tell django to redirect to the home page after login
#LOGIN_REDIRECT_URL='home'

# #this option is used to tell django to redirect to the login page after logout
#LOGOUT_REDIRECT_URL='login'

# #this option is used to tell django to use the console backend for sending emails
# #instead of the SMTP backend (sending emails to the console instead of sending emails to the user)
#EMAIL_BACKEND='django.core.mail.backends.console.EmailBackend'

# #security settings
# #these settings are used to tell django to use HTTPS instead of HTTP
# #SECURE_SSL_REDIRECT=True => redirect all HTTP requests to HTTPS
# SECURE_SSL_REDIRECT=True
# #this option is used to tell django to set the session cookie as secure
# #SESSION_COOKIE_SECURE=True => only send the session cookie over HTTPS
# SESSION_COOKIE_SECURE=True
# #this option is used to tell django to set the CSRF cookie as secure
# #CSRF_COOKIE_SECURE=True => only send the CSRF cookie over HTTPS
# CSRF_COOKIE_SECURE=True
# #this option is used to tell django to set the HTTP Strict Transport Security (HSTS) header
# #SECURE_HSTS_SECONDS=3600 => set the HSTS header for 1 hour
# #HSTS means HTTP Strict Transport Security=> it is a web security policy mechanism
# # that helps to protect websites against protocol downgrade attacks and cookie hijacking
# SECURE_HSTS_SECONDS=3600
# #this option is used to tell django to include subdomains in the HSTS header
# #SECURE_HSTS_INCLUDE_SUBDOMAINS=True => include subdomains in the HSTS header
# #Subdomains are domains that are part of a larger domain (e.g. mail.google.com is a subdomain of google.com)
# SECURE_HSTS_INCLUDE_SUBDOMAINS=True
# #this option is used to tell django to preload the HSTS header
# #SECURE_HSTS_PRELOAD=True => preload the HSTS header
# #Preloading the HSTS header means that the browser will always use HTTPS to access the website
# SECURE_HSTS_PRELOAD=True
# #this option is used to tell django to set the referrer policy header
# #SECURE_REFERRER_POLICY='same-origin' => set the referrer policy header to 'same-origin'
# #The referrer policy header is used to tell the browser which referrer information should be included with requests made from the website to other websites (e.g. when a user clicks on a link on the website)
# #The 'same-origin' value means that the referrer information should only be included with requests made from the website to other pages on the same website
# #The 'same-origin' value is the most secure value for the referrer policy header
# #other values for the referrer policy header are 'no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'unsafe-url'

# SECURE_REFERRER_POLICY='same-origin'
# #this option is used to tell django to set the X-XSS-Protection header
# #SECURE_BROWSER_XSS_FILTER=True => set the X-XSS-Protection header
# #The X-XSS-Protection header is used to tell the browser to block pages that contain cross-site scripting (XSS) attacks
# #Cross-site scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites
# #The X-XSS-Protection header is supported by Internet Explorer, Chrome, and Safari
# #The X-XSS-Protection header is not supported by Firefox
# #The X-XSS-Protection header is deprecated in Chrome
# #The X-XSS-Protection header is not supported by Edge
# #The X-XSS-Protection header is not supported by Opera
# #The X-XSS-Protection header is not supported by Safari
# #The X-XSS-Protection header is not supported by iOS Safari
# #The X-XSS-Protection header is not supported by Android Browser
# #The X-XSS-Protection header is not supported by Opera Mini
# #The X-XSS-Protection header is not supported by UC Browser for Android
# #The X-XSS-Protection header is not supported by Samsung Internet
# #The X-XSS-Protection header is not supported by QQ Browser
# SECURE_BROWSER_XSS_FILTER=True
# #this option is used to tell django to set the X-Content-Type-Options header
# #SECURE_CONTENT_TYPE_NOSNIFF=True => set the X-Content-Type-Options header
# #The X-Content-Type-Options header is used to tell the browser to prevent MIME type sniffing
# #MIME type sniffing is the process of determining the type of data contained in a file based on the file's content
# #The X-Content-Type-Options header is supported by Internet Explorer, Chrome, and Safari
# #The X-Content-Type-Options header is not supported by Firefox
# #The X-Content-Type-Options header is not supported by Edge
# #The X-Content-Type-Options header is not supported by Opera
# #The X-Content-Type-Options header is not supported by Safari
# SECURE_CONTENT_TYPE_NOSNIFF=True
# #this option is used to tell django to set the X-Frame-Options header
# #SECURE_FRAME_DENY=True => set the X-Frame-Options header
# #The X-Frame-Options header is used to tell the browser to prevent clickjacking attacks
# #Clickjacking attacks are a type of attack in which a malicious website tricks a user into clicking on a link on the malicious website
# #The X-Frame-Options header is supported by Internet Explorer, Chrome, and Safari
# #The X-Frame-Options header is not supported by Firefox
# #The X-Frame-Options header is not supported by Edge
# #The X-Frame-Options header is not supported by Opera
# #The X-Frame-Options header is not supported by Safari
# #The DENY value for the X-Frame-Options header tells the browser to prevent the website from being displayed in a frame
# #The SAMEORIGIN value for the X-Frame-Options header tells the browser to only allow the website to be displayed in a frame on the same origin as the website
# #The ALLOW-FROM uri value for the X-Frame-Options header tells the browser to only allow the website to be displayed in a frame on the specified origin

# X_FRAME_OPTIONS='DENY'
# #this option is used to tell django to set the Content-Security-Policy header
# #SECURE_CSP=True => set the Content-Security-Policy header
# #The Content-Security-Policy header is used to tell the browser which content is allowed to be loaded on the website
# #The Content-Security-Policy header is supported by Chrome, Firefox, Edge, Opera, and Safari
# #SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https') => set the SECURE_PROXY_SSL_HEADER setting
# #The SECURE_PROXY_SSL_HEADER setting is used to tell django which header to use to determine whether the request is secure
# #The SECURE_PROXY_SSL_HEADER setting is used when the django application is behind a reverse proxy that is handling HTTPS requests
# #The SECURE_PROXY_SSL_HEADER setting is used to tell django to trust the X-Forwarded-Proto header
# #The X-Forwarded-Proto header is used by reverse proxies to tell the django application whether the request is secure
# #'HTTP_X_FORWARDED_PROTO', 'https' => use the X-Forwarded-Proto header to determine whether the request is secure
# #The SECURE_PROXY_SSL_HEADER setting is used to tell django to trust the X-Forwarded-Proto header when the value of the X-Forwarded-Proto header is 'https'

# SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
#     BASE_DIR / 'signing_registration_app/backends',
# ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'signing_registration_project.urls'


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'signing_registration_app/static')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['signing_registration_project/templates/accounts'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.static', 
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'signing_registration_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
